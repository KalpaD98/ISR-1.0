
Intruder scareoff robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000084e  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063d  00000000  00000000  00000a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006bd  00000000  00000000  00001097  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001754  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000f66f  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001bf  00000000  00000000  00010e37  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00010ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000327  00000000  00000000  0001102e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	4d d0       	rcall	.+154    	; 0xfc <main>
  62:	4d c0       	rjmp	.+154    	; 0xfe <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <adc_init>:


/*ADC Function Definitions*/
void adc_init(void)
{
	ADCSRA=(1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADPS2);
  66:	84 ee       	ldi	r24, 0xE4	; 228
  68:	86 b9       	out	0x06, r24	; 6
	SFIOR=0x00;
  6a:	10 be       	out	0x30, r1	; 48
  6c:	08 95       	ret

0000006e <read_adc_channel>:

int read_adc_channel(unsigned char channel)
{
	int adc_value;
	unsigned char temp;
	ADMUX=(1<<REFS0)|channel;
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	8f e9       	ldi	r24, 0x9F	; 159
  74:	9f e0       	ldi	r25, 0x0F	; 15
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <read_adc_channel+0x8>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <read_adc_channel+0xe>
  7c:	00 00       	nop
	_delay_ms(1);
	temp=ADCL;
  7e:	84 b1       	in	r24, 0x04	; 4
	adc_value=ADCH;
  80:	25 b1       	in	r18, 0x05	; 5
	adc_value=(adc_value<<8)|temp;
  82:	90 e0       	ldi	r25, 0x00	; 0
	return adc_value;
}
  84:	92 2b       	or	r25, r18
  86:	08 95       	ret

00000088 <Drive>:

/* obstacle avoidance definition */

int Drive(void)
{
	DDRB=0x0f;
  88:	8f e0       	ldi	r24, 0x0F	; 15
  8a:	87 bb       	out	0x17, r24	; 23
	/*PB0,PB1,PB2 and PB3 pins of PortB are declared output (i/p1,i/p2,i/p3,i/p4 pins of DC Motor Driver are connected)*/

	int left_sensor_value,front_sensor_value,right_sensor_value;
	/*Variable declarations*/

	adc_init();
  8c:	ec df       	rcall	.-40     	; 0x66 <adc_init>
			//PORTB=0x08;
			//Robot will move in RIGHT direction
			
			
			//test code
			PORTB=0x05; 
  8e:	0f 2e       	mov	r0, r31
  90:	f5 e0       	ldi	r31, 0x05	; 5
  92:	ef 2e       	mov	r14, r31
  94:	f0 2d       	mov	r31, r0
			_delay_ms(300);
			//Robot will move in BACKWARD direction
			PORTB=0x08;
  96:	68 94       	set
  98:	ff 24       	eor	r15, r15
  9a:	f3 f8       	bld	r15, 3
		
		/*Checking the sensor values with the reference value*/
		//if(front_sensor_value > REF)
		if(front_sensor_value > REF && left_sensor_value > REF && right_sensor_value > REF) //testing phase
		{
			PORTB=0x0a;
  9c:	0f 2e       	mov	r0, r31
  9e:	fa e0       	ldi	r31, 0x0A	; 10
  a0:	df 2e       	mov	r13, r31
  a2:	f0 2d       	mov	r31, r0
	/*ADC initialization*/
	
	/*Start of infinite loop*/
	while(1)
	{
		left_sensor_value=read_adc_channel(0);
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	e3 df       	rcall	.-58     	; 0x6e <read_adc_channel>
  a8:	ec 01       	movw	r28, r24
		/*Reading left IR sensor value*/
		
		front_sensor_value=read_adc_channel(1);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	e0 df       	rcall	.-64     	; 0x6e <read_adc_channel>
  ae:	8c 01       	movw	r16, r24
		/*Reading front IR sensor value*/

		right_sensor_value=read_adc_channel(2);
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	dd df       	rcall	.-70     	; 0x6e <read_adc_channel>
  b4:	08 36       	cpi	r16, 0x68	; 104
		/*Reading right IR sensor value*/
		
		/*Checking the sensor values with the reference value*/
		//if(front_sensor_value > REF)
		if(front_sensor_value > REF && left_sensor_value > REF && right_sensor_value > REF) //testing phase
  b6:	12 40       	sbci	r17, 0x02	; 2
  b8:	54 f0       	brlt	.+20     	; 0xce <Drive+0x46>
  ba:	c8 36       	cpi	r28, 0x68	; 104
  bc:	22 e0       	ldi	r18, 0x02	; 2
  be:	d2 07       	cpc	r29, r18
  c0:	34 f0       	brlt	.+12     	; 0xce <Drive+0x46>
  c2:	88 36       	cpi	r24, 0x68	; 104
  c4:	22 e0       	ldi	r18, 0x02	; 2
  c6:	92 07       	cpc	r25, r18
  c8:	14 f0       	brlt	.+4      	; 0xce <Drive+0x46>
  ca:	d8 ba       	out	0x18, r13	; 24
		{
			PORTB=0x0a;
  cc:	eb cf       	rjmp	.-42     	; 0xa4 <Drive+0x1c>
  ce:	c7 36       	cpi	r28, 0x67	; 103
			/*Robot will move in forward direction*/
		}
		else if(left_sensor_value < REF)
  d0:	d2 40       	sbci	r29, 0x02	; 2
  d2:	14 f4       	brge	.+4      	; 0xd8 <Drive+0x50>
  d4:	f8 ba       	out	0x18, r15	; 24
		{
			PORTB=0x08;
  d6:	e6 cf       	rjmp	.-52     	; 0xa4 <Drive+0x1c>
  d8:	87 36       	cpi	r24, 0x67	; 103
			/*Robot will move in RIGHT direction*/
		}
		else if(right_sensor_value < REF)
  da:	92 40       	sbci	r25, 0x02	; 2
  dc:	1c f4       	brge	.+6      	; 0xe4 <Drive+0x5c>
  de:	82 e0       	ldi	r24, 0x02	; 2
		{
			PORTB=0x02;
  e0:	88 bb       	out	0x18, r24	; 24
  e2:	e0 cf       	rjmp	.-64     	; 0xa4 <Drive+0x1c>
  e4:	e8 ba       	out	0x18, r14	; 24
			//PORTB=0x08;
			//Robot will move in RIGHT direction
			
			
			//test code
			PORTB=0x05; 
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	95 ea       	ldi	r25, 0xA5	; 165
  ea:	2e e0       	ldi	r18, 0x0E	; 14
  ec:	81 50       	subi	r24, 0x01	; 1
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	20 40       	sbci	r18, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <Drive+0x64>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <Drive+0x6e>
  f6:	00 00       	nop
  f8:	f8 ba       	out	0x18, r15	; 24
			_delay_ms(300);
			//Robot will move in BACKWARD direction
			PORTB=0x08;
  fa:	d4 cf       	rjmp	.-88     	; 0xa4 <Drive+0x1c>

000000fc <main>:
  fc:	c5 df       	rcall	.-118    	; 0x88 <Drive>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
